name: Deploy NVIDIA-SMI to RunPod Serverless

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: "Deployment environment"
        required: true
        default: "production"
        type: choice
        options:
          - production
          - staging
          - development
      gpu_type:
        description: "GPU type"
        required: false
        default: "NVIDIA RTX A4000"
        type: choice
        options:
          - NVIDIA A40
          - NVIDIA RTX A5000
          - NVIDIA RTX A4000
          - NVIDIA RTX 4090
          - NVIDIA RTX 3090
      datacenter:
        description: "RunPod datacenter"
        required: false
        default: "US-KS-2"
        type: choice
        options:
          - US-KS-2
          - US-GA-1
          - US-GA-2
          - CA-MTL-3
          - EU-RO-1
          - EU-CZ-1
          - EU-FR-1
          - EU-NL-1
          - EU-SE-1
          - EUR-IS-2
      execution_timeout:
        description: "Execution timeout (seconds)"
        required: false
        default: "3600"
        type: choice
        options:
          - "600"    # 10 minutes
          - "1800"   # 30 minutes  
          - "3600"   # 1 hour
          - "7200"   # 2 hours
          - "14400"  # 4 hours
          - "86400"  # 24 hours

env:
  GAR_LOCATION: us-central1
  GAR_REPOSITORY: talking-head-registry
  PROJECT_ID: jay-dhanwant-experiments
  IMAGE_NAME: runpod-nvidia-smi

jobs:
  deploy:
    name: Build and Deploy to RunPod
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for GAR
        run: |
          gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev

      - name: Build and push to GAR
        id: build
        run: |
          IMAGE_URL="${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.GAR_REPOSITORY }}/${{ env.IMAGE_NAME }}"

          # Build and tag image
          docker buildx build --platform linux/amd64 \
            -t "${IMAGE_URL}:latest" \
            -t "${IMAGE_URL}:${{ github.sha }}" \
            --push .

          echo "✅ Built and pushed: ${IMAGE_URL}:${{ github.sha }}"
          echo "image_url=${IMAGE_URL}:latest" >> $GITHUB_OUTPUT

      - name: Install RunPod CLI dependencies
        run: |
          pip install requests

      - name: Create or Find Network Volume
        id: volume
        run: |
          VOLUME_NAME="model-storage-${{ github.event.inputs.environment || 'prod' }}"
          DATACENTER_ID="${{ github.event.inputs.datacenter || 'US-KS-2' }}"
          VOLUME_SIZE=100  # Network volume size in GB
          LOCAL_VOLUME_SIZE=100  # Local volume size in GB  
          CONTAINER_DISK_SIZE=20  # Container disk size in GB
          
          echo "Looking for existing volume: $VOLUME_NAME"
          
          # Check if volume exists
          VOLUMES_RESPONSE=$(curl -s -X GET "https://rest.runpod.io/v1/networkvolumes" \
            -H "Authorization: Bearer ${{ secrets.RUNPOD_API_KEY }}" \
            -H "Content-Type: application/json")
          
          EXISTING_VOLUME=$(echo "$VOLUMES_RESPONSE" | jq -r ".[] | select(.name==\"$VOLUME_NAME\") | .id")
          
          if [ -n "$EXISTING_VOLUME" ] && [ "$EXISTING_VOLUME" != "null" ]; then
            echo "🔄 Using existing volume: $EXISTING_VOLUME"
            VOLUME_ID="$EXISTING_VOLUME"
          else
            echo "📦 Creating new network volume..."
            
            VOLUME_RESPONSE=$(curl -s -X POST "https://rest.runpod.io/v1/networkvolumes" \
              -H "Authorization: Bearer ${{ secrets.RUNPOD_API_KEY }}" \
              -H "Content-Type: application/json" \
              -d "{\"name\":\"$VOLUME_NAME\",\"size\":$VOLUME_SIZE,\"dataCenterId\":\"$DATACENTER_ID\"}")
            
            echo "Volume response: $VOLUME_RESPONSE"
            
            # Check for errors
            if echo "$VOLUME_RESPONSE" | jq -e '.error' > /dev/null 2>&1; then
              echo "❌ Volume creation failed:"
              echo "$VOLUME_RESPONSE" | jq '.error'
              exit 1
            fi
            
            VOLUME_ID=$(echo "$VOLUME_RESPONSE" | jq -r '.id')
            
            if [ "$VOLUME_ID" = "null" ] || [ -z "$VOLUME_ID" ]; then
              echo "❌ Volume creation failed - no volume ID returned"
              echo "Full response: $VOLUME_RESPONSE"
              exit 1
            fi
            
            echo "✅ Volume created: $VOLUME_ID"
          fi
          
          echo "volume_id=$VOLUME_ID" >> $GITHUB_OUTPUT
          echo "volume_name=$VOLUME_NAME" >> $GITHUB_OUTPUT
          echo "volume_size=$VOLUME_SIZE" >> $GITHUB_OUTPUT
          echo "local_volume_size=$LOCAL_VOLUME_SIZE" >> $GITHUB_OUTPUT
          echo "container_disk_size=$CONTAINER_DISK_SIZE" >> $GITHUB_OUTPUT
          echo "datacenter=$DATACENTER_ID" >> $GITHUB_OUTPUT

      - name: Create or Update RunPod Template
        id: template
        run: |
          IMAGE_URL="${{ steps.build.outputs.image_url }}"
          TEMPLATE_NAME="nvidia-smi-${{ github.event.inputs.environment || 'prod' }}-$(date +%s)"
          VOLUME_ID="${{ steps.volume.outputs.volume_id }}"
          VOLUME_SIZE="${{ steps.volume.outputs.volume_size }}"
          LOCAL_VOLUME_SIZE="${{ steps.volume.outputs.local_volume_size }}"
          CONTAINER_DISK_SIZE="${{ steps.volume.outputs.container_disk_size }}"

          echo "Creating template: $TEMPLATE_NAME"
          echo "Image: $IMAGE_URL"
          echo "Network Volume: $VOLUME_ID (${VOLUME_SIZE}GB)"
          echo "Local Volume: ${LOCAL_VOLUME_SIZE}GB at /workspace"
          echo "Container Disk: ${CONTAINER_DISK_SIZE}GB"

          # Create template using REST API with configurable storage sizes
          # Properly escape GCP credentials JSON for template payload
          GCS_BUCKET="${{ secrets.GCS_BUCKET || 'talking-head-models' }}"
          
          # Create JSON payload using jq to properly escape all values
          TEMPLATE_PAYLOAD=$(jq -n \
            --arg name "$TEMPLATE_NAME" \
            --arg image "$IMAGE_URL" \
            --argjson containerDisk "$CONTAINER_DISK_SIZE" \
            --argjson volumeSize "$LOCAL_VOLUME_SIZE" \
            --arg volumePath "/workspace" \
            --arg gcpCreds '${{ secrets.GCP_CREDENTIALS }}' \
            --arg gcsBucket "$GCS_BUCKET" \
            --arg registryAuth "cmf2s9lsv0001jl0267lkqfxq" \
            '{
              name: $name,
              imageName: $image,
              containerDiskInGb: $containerDisk,
              volumeInGb: $volumeSize,
              volumeMountPath: $volumePath,
              env: {
                "CUDA_VISIBLE_DEVICES": "0",
                "PYTHONUNBUFFERED": "1",
                "GCP_CREDENTIALS": $gcpCreds,
                "GCS_BUCKET": $gcsBucket
              },
              containerRegistryAuthId: $registryAuth
            }')
          
          echo "Template payload (first 200 chars): $(echo "$TEMPLATE_PAYLOAD" | head -c 200)..."
          
          TEMPLATE_RESPONSE=$(curl -s -X POST "https://rest.runpod.io/v1/templates" \
            -H "Authorization: Bearer ${{ secrets.RUNPOD_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d "$TEMPLATE_PAYLOAD")

          echo "Raw template response: $TEMPLATE_RESPONSE"

          # Check for REST API errors first
          if echo "$TEMPLATE_RESPONSE" | jq -e '.error' > /dev/null 2>&1; then
            echo "❌ REST API errors found:"
            echo "$TEMPLATE_RESPONSE" | jq '.error'
            exit 1
          fi

          # Check if response is empty or null
          if [ -z "$TEMPLATE_RESPONSE" ] || [ "$TEMPLATE_RESPONSE" = "null" ]; then
            echo "❌ Empty or null template response"
            exit 1
          fi

          # Extract template ID with better error handling for REST API
          TEMPLATE_ID=$(echo "$TEMPLATE_RESPONSE" | jq -r '.id // empty')

          if [ -z "$TEMPLATE_ID" ] || [ "$TEMPLATE_ID" = "null" ]; then
            echo "❌ Template creation failed - no template ID returned"
            echo "Full response: $TEMPLATE_RESPONSE"
            exit 1
          fi

          echo "✅ Template created: $TEMPLATE_ID"
          echo "template_id=$TEMPLATE_ID" >> $GITHUB_OUTPUT
          echo "template_name=$TEMPLATE_NAME" >> $GITHUB_OUTPUT

      - name: Create or Update RunPod Endpoint
        id: endpoint
        run: |
          TEMPLATE_ID="${{ steps.template.outputs.template_id }}"
          ENDPOINT_NAME="nvidia-smi-${{ github.event.inputs.environment || 'prod' }}"
          GPU_TYPE="${{ github.event.inputs.gpu_type || 'NVIDIA RTX A4000' }}"
          VOLUME_ID="${{ steps.volume.outputs.volume_id }}"
          EXECUTION_TIMEOUT_SECONDS="${{ github.event.inputs.execution_timeout || '3600' }}"
          EXECUTION_TIMEOUT_MS=$((EXECUTION_TIMEOUT_SECONDS * 1000))

          echo "Creating endpoint: $ENDPOINT_NAME"
          echo "Template: $TEMPLATE_ID"
          echo "GPU: $GPU_TYPE"
          echo "Network Volume: $VOLUME_ID"
          echo "Execution Timeout: ${EXECUTION_TIMEOUT_SECONDS}s (${EXECUTION_TIMEOUT_MS}ms)"

          # Check if endpoint exists using REST API
          ENDPOINTS_RESPONSE=$(curl -s -X GET "https://rest.runpod.io/v1/endpoints" \
            -H "Authorization: Bearer ${{ secrets.RUNPOD_API_KEY }}" \
            -H "Content-Type: application/json")
          
          EXISTING_ENDPOINT=$(echo "$ENDPOINTS_RESPONSE" | jq -r ".[] | select(.name==\"$ENDPOINT_NAME\") | .id")

          if [ -n "$EXISTING_ENDPOINT" ] && [ "$EXISTING_ENDPOINT" != "null" ]; then
            echo "🔄 Endpoint exists: $EXISTING_ENDPOINT, updating with new template..."
            
            # Update existing endpoint with new template
            UPDATE_RESPONSE=$(curl -s -X PATCH "https://rest.runpod.io/v1/endpoints/$EXISTING_ENDPOINT" \
              -H "Authorization: Bearer ${{ secrets.RUNPOD_API_KEY }}" \
              -H "Content-Type: application/json" \
              -d "{\"templateId\":\"$TEMPLATE_ID\",\"executionTimeoutMs\":$EXECUTION_TIMEOUT_MS}")
            
            echo "Update response: $UPDATE_RESPONSE"
            
            # Check if update was successful
            if echo "$UPDATE_RESPONSE" | jq -e '.error' > /dev/null 2>&1; then
              echo "❌ Endpoint update failed"
              echo "$UPDATE_RESPONSE"
              exit 1
            fi
            
            echo "✅ Endpoint updated with new template"
            ENDPOINT_ID="$EXISTING_ENDPOINT"
          else
            echo "📡 Creating new endpoint..."

            ENDPOINT_RESPONSE=$(curl -s -X POST "https://rest.runpod.io/v1/endpoints" \
              -H "Authorization: Bearer ${{ secrets.RUNPOD_API_KEY }}" \
              -H "Content-Type: application/json" \
              -d "{\"name\":\"$ENDPOINT_NAME\",\"templateId\":\"$TEMPLATE_ID\",\"gpuTypeIds\":[\"$GPU_TYPE\"],\"workersMin\":0,\"workersMax\":2,\"idleTimeout\":5,\"executionTimeoutMs\":$EXECUTION_TIMEOUT_MS,\"scalerType\":\"QUEUE_DELAY\",\"scalerValue\":4,\"networkVolumeId\":\"$VOLUME_ID\"}")

            echo "Endpoint response: $ENDPOINT_RESPONSE"

            ENDPOINT_ID=$(echo "$ENDPOINT_RESPONSE" | jq -r '.id')

            if [ "$ENDPOINT_ID" = "null" ]; then
              echo "❌ Endpoint creation failed"
              echo "$ENDPOINT_RESPONSE"
              exit 1
            fi

            echo "✅ Endpoint created: $ENDPOINT_ID"
          fi

          echo "endpoint_id=$ENDPOINT_ID" >> $GITHUB_OUTPUT
          echo "endpoint_name=$ENDPOINT_NAME" >> $GITHUB_OUTPUT

      - name: Wait for endpoint initialization
        run: |
          echo "⏳ Waiting for endpoint to initialize (30 seconds)..."
          sleep 30

      - name: Test endpoint
        id: test
        continue-on-error: true
        run: |
          ENDPOINT_ID="${{ steps.endpoint.outputs.endpoint_id }}"

          echo "🧪 Testing endpoint: $ENDPOINT_ID"

          # Test the endpoint
          TEST_RESPONSE=$(curl -s -X POST "https://api.runpod.ai/v2/$ENDPOINT_ID/runsync" \
            -H "Content-Type: application/json" \
            -d '{"input": {"test": "nvidia-smi"}}' \
            --connect-timeout 30 --max-time 120)

          echo "Test response: $TEST_RESPONSE"

          # Check if test was successful
          if echo "$TEST_RESPONSE" | jq -e '.output.status == "success"' > /dev/null 2>&1; then
            echo "✅ Endpoint test successful!"
            echo "test_status=success" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Endpoint test may have issues"
            echo "test_status=warning" >> $GITHUB_OUTPUT
          fi

      - name: Generate deployment summary
        run: |
          ENDPOINT_ID="${{ steps.endpoint.outputs.endpoint_id }}"
          ENDPOINT_NAME="${{ steps.endpoint.outputs.endpoint_name }}"
          TEMPLATE_NAME="${{ steps.template.outputs.template_name }}"
          IMAGE_URL="${{ steps.build.outputs.image_url }}"
          TEST_STATUS="${{ steps.test.outputs.test_status }}"
          VOLUME_ID="${{ steps.volume.outputs.volume_id }}"
          VOLUME_NAME="${{ steps.volume.outputs.volume_name }}"
          VOLUME_SIZE="${{ steps.volume.outputs.volume_size }}"
          LOCAL_VOLUME_SIZE="${{ steps.volume.outputs.local_volume_size }}"
          CONTAINER_DISK_SIZE="${{ steps.volume.outputs.container_disk_size }}"
          DATACENTER="${{ steps.volume.outputs.datacenter }}"
          EXECUTION_TIMEOUT="${{ github.event.inputs.execution_timeout || '3600' }}"

          echo "## 🚀 RunPod Deployment Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deployment Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Endpoint ID**: \`$ENDPOINT_ID\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Endpoint Name**: \`$ENDPOINT_NAME\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Template**: \`$TEMPLATE_NAME\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Docker Image**: \`$IMAGE_URL\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: \`${{ github.event.inputs.environment || 'production' }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Datacenter**: \`$DATACENTER\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Execution Timeout**: \`${EXECUTION_TIMEOUT}s\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Network Volume**: \`$VOLUME_NAME\` (\`$VOLUME_ID\`)" >> $GITHUB_STEP_SUMMARY
          echo "- **Test Status**: \`$TEST_STATUS\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 💾 Storage Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- **Container Disk**: ${CONTAINER_DISK_SIZE}GB (temporary)" >> $GITHUB_STEP_SUMMARY
          echo "- **Local Volume**: ${LOCAL_VOLUME_SIZE}GB at \`/workspace\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Network Volume**: ${VOLUME_SIZE}GB at \`/runpod-volume\` (persistent)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📁 Storage Access Guide" >> $GITHUB_STEP_SUMMARY
          echo "- **Models/Data**: Store in \`/runpod-volume/\` for persistence" >> $GITHUB_STEP_SUMMARY
          echo "- **Workspace**: Use \`/workspace/\` for temporary files" >> $GITHUB_STEP_SUMMARY
          echo "- **Tip**: Symlink \`ln -s /runpod-volume /workspace/models\` for convenience" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🧪 Test Your Endpoint" >> $GITHUB_STEP_SUMMARY
          echo "**⚠️ Replace YOUR_API_KEY with your actual RunPod API key**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "# Test nvidia-smi endpoint" >> $GITHUB_STEP_SUMMARY
          echo "curl -X POST \"https://api.runpod.ai/v2/$ENDPOINT_ID/runsync\" \\" >> $GITHUB_STEP_SUMMARY
          echo "  -H \"Authorization: Bearer YOUR_API_KEY\" \\" >> $GITHUB_STEP_SUMMARY
          echo "  -H \"Content-Type: application/json\" \\" >> $GITHUB_STEP_SUMMARY
          echo "  -d '{\"input\": {\"test\": \"nvidia-smi\"}}'" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Download models from GCS bucket (⏱️ Uses ${EXECUTION_TIMEOUT}s timeout)" >> $GITHUB_STEP_SUMMARY
          echo "curl -X POST \"https://api.runpod.ai/v2/$ENDPOINT_ID/runsync\" \\" >> $GITHUB_STEP_SUMMARY
          echo "  -H \"Authorization: Bearer YOUR_API_KEY\" \\" >> $GITHUB_STEP_SUMMARY
          echo "  -H \"Content-Type: application/json\" \\" >> $GITHUB_STEP_SUMMARY
          echo "  -d '{\"input\": {\"action\": \"download_models\"}}'" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# List files in /workspace directory" >> $GITHUB_STEP_SUMMARY
          echo "curl -X POST \"https://api.runpod.ai/v2/$ENDPOINT_ID/runsync\" \\" >> $GITHUB_STEP_SUMMARY
          echo "  -H \"Authorization: Bearer YOUR_API_KEY\" \\" >> $GITHUB_STEP_SUMMARY
          echo "  -H \"Content-Type: application/json\" \\" >> $GITHUB_STEP_SUMMARY
          echo "  -d '{\"input\": {\"action\": \"list_files\", \"path\": \"/workspace\"}}'" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# List files in /runpod-volume directory (persistent models)" >> $GITHUB_STEP_SUMMARY
          echo "curl -X POST \"https://api.runpod.ai/v2/$ENDPOINT_ID/runsync\" \\" >> $GITHUB_STEP_SUMMARY
          echo "  -H \"Authorization: Bearer YOUR_API_KEY\" \\" >> $GITHUB_STEP_SUMMARY
          echo "  -H \"Content-Type: application/json\" \\" >> $GITHUB_STEP_SUMMARY
          echo "  -d '{\"input\": {\"action\": \"list_files\", \"path\": \"/runpod-volume\"}}'" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ⚡ Quick Test Commands" >> $GITHUB_STEP_SUMMARY
          echo "**Set your API key:** \`export RUNPOD_API_KEY=your_api_key_here\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**1. Test GPU Access:**" >> $GITHUB_STEP_SUMMARY
          echo "\`curl -X POST \"https://api.runpod.ai/v2/$ENDPOINT_ID/runsync\" -H \"Authorization: Bearer \$RUNPOD_API_KEY\" -H \"Content-Type: application/json\" -d '{\"input\": {\"test\": \"nvidia-smi\"}}'\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**2. Download All Models (⏱️ ${EXECUTION_TIMEOUT}s timeout):**" >> $GITHUB_STEP_SUMMARY
          echo "\`curl -X POST \"https://api.runpod.ai/v2/$ENDPOINT_ID/runsync\" -H \"Authorization: Bearer \$RUNPOD_API_KEY\" -H \"Content-Type: application/json\" -d '{\"input\": {\"action\": \"download_models\"}}'\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**3. List Downloaded Models:**" >> $GITHUB_STEP_SUMMARY
          echo "\`curl -X POST \"https://api.runpod.ai/v2/$ENDPOINT_ID/runsync\" -H \"Authorization: Bearer \$RUNPOD_API_KEY\" -H \"Content-Type: application/json\" -d '{\"input\": {\"action\": \"list_files\", \"path\": \"/runpod-volume\"}}'\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 RunPod Dashboard" >> $GITHUB_STEP_SUMMARY
          echo "- [Endpoint Dashboard](https://www.runpod.io/console/serverless/$ENDPOINT_ID)" >> $GITHUB_STEP_SUMMARY
          echo "- [All Serverless Endpoints](https://www.runpod.io/console/serverless)" >> $GITHUB_STEP_SUMMARY
